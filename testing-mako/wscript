#! /usr/bin/env python
# encoding: utf-8

from mako.template import Template
from mako.lookup import TemplateLookup
from shlex import shlex
from waflib import Logs
import pipes
import os

APPNAME = 'SDA Rhytmikbuch'
VERSION = '0.1'

top = '.'
out = 'out'

def configure(ctx):
        Logs.info('Configuring the project in ' + ctx.path.abspath())
        ctx.find_program('lilypond', var='LILYPOND')
        

def build(bld):
	
	basedir = top
	
	compile_single_ly = list(bld.env.LILYPOND)
	compile_single_ly.extend(['-I', pipes.quote(bld.srcnode.abspath())])

	#collect all files to build
	lyfiles = []
	for root, dirs, files in os.walk(basedir):
		for file in files:
			if file.endswith(".ly") and not file.endswith("out.ly"):
				relpath = os.path.relpath(root, basedir)
				lyfiles.append(os.path.join(relpath,file))
				
				# build every single file
				compile_single_ly = list(bld.env.LILYPOND)
				compile_single_ly.extend(['-I', pipes.quote(bld.srcnode.abspath())])
				compile_single_ly.extend([pipes.quote(os.path.normpath(os.path.join(root,file)))])
				compile_single_ly = ' '.join(map(str, compile_single_ly))
				bld(rule=compile_single_ly, shell=True)
	

	# render all collected files in one book	
	mylookup = TemplateLookup(directories=[basedir], input_encoding='utf-8')
	mytemplate = mylookup.get_template('book.mako')
	rendered = mytemplate.render(list=lyfiles)
	
	# save book as out.ly
	book_py_filename = pipes.quote(os.path.join(basedir, os.path.join(bld.bldnode.abspath(), 'out.ly')))
	file_ = open(book_py_filename, 'w')
	file_.write(rendered)
	file_.close()

	lyfiles.sort()
	Logs.info("Collected following files %s" % lyfiles)

	# build the book	
	compile_single_ly = list(bld.env.LILYPOND)
	compile_single_ly.extend(['-I', pipes.quote(bld.bldnode.abspath())])
	compile_single_ly.extend([book_py_filename])
	compile_single_ly = ' '.join(map(str, compile_single_ly))
	bld(rule=compile_single_ly, shell=True)

